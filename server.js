// const path = require('path');
// const express = require('express');
// const session = require('express-session');
// const exphbs = require('express-handlebars');
// const routes=require('./controllers');
// const helpers=require('./utils/helpers')



// const sequelize = require('./config/connection');
// const SequelizeStore=require('connect-session-sequelize')(session.Store);

// const app = express();
// const PORT = process.env.PORT || 3003;

// // Set up Handlebars.js engine with custom helpers
// const hbs=exphbs.create({helpers});

// const sess={
//     secret:'Super secret secret',
//     cookie:{
//         maxAge:300000,
//         httpOnly:true,
//         secure:false,
//         sameSite:'strict',
//     },
//     resave:false,
//     saveUninitialized:true,
//     store: new SequelizeStore({
//         db:sequelize,
//     }),
// };

// app.use(session(sess));

// //below will inform express.js on what templete engine to use
// app.engine('handlebars',hbs.engine);
// app.set('view engine', 'handlebars');

// app.use(express.json());
// app.use(express.urlencoded({extended:true}));
// app.use(express.static(path.join(__dirname,'public')));

// app.use(routes);

// sequelize.sync({ force:false}).then(()=>{
//     app.listen(PORT,()=>console.log('Now listening!'));
// });

const path = require('path');
const express = require('express');
const session = require('express-session');
const exphbs = require('express-handlebars');
const routes = require('./controllers');
const helpers = require('./utils/helpers');

const sequelize = require('./config/connection');
const SequelizeStore = require('connect-session-sequelize')(session.Store);

const app = express();
const PORT = process.env.PORT || 3001;

// Set up Handlebars.js engine with custom helpers
const hbs = exphbs.create({ helpers });

const sess = {
  secret: 'Super secret secret',
  cookie: {
    maxAge: 300000, // alternative is using the expiration
    httpOnly: true, //not accessible to js e.g. document.cookie should not reveal it. 
    secure: false, // IRL should be true, meaning it won't be sent on http requests, only https. 
    sameSite: 'strict',  // don't include in req generated by other origins or even top level nav requests. 
  },
  resave: false,
  saveUninitialized: true,
  store: new SequelizeStore({
    db: sequelize,
  }),
};

app.use(session(sess));

// Inform Express.js on which template engine to use
app.engine('handlebars', hbs.engine);
app.set('view engine', 'handlebars');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

app.use(routes);

sequelize.sync({ force: false }).then(() => {
  app.listen(PORT, () => console.log(`Now listening on ${PORT}`));
});


